
let { props } = usePage();
let praticiens = computed(() => props.praticiens);
let medicaments = computed(() => props.medicaments);

let form = useForm({
  date: '',
  bilan: '',
  praticien: '',
  medicament: ''
});

function submit() {
  form.post(route('compteRendu.store'), {
    preserveScroll: true,
    onSuccess: () => {
      form.reset();
    },
  });
}
<form @submit.prevent="submit">
    <!-- praticien -->
   <div class="mt-4">
     <InputLabel for="praticien" value="Praticien" />
     <select v-model="form.praticien" id="praticien">
       <option v-for="praticien in praticiens" :value="praticien.PRA_NUM" :key="praticien.PRA_NUM">
         {{ praticien.PRA_NOM }} {{ praticien.PRA_PRENOM }}
       </option>
     </select>
   </div>
   <!-- date de la visite -->
   <div class="mt-4">
     <InputLabel for="date" value="Date de la visite" />
     <TextInput id="date" type="date" class="mt-1 block w-full" v-model="form.date" required autocomplete="date" />
     <InputError class="mt-2" :message="form.errors.date" />
   </div>
   <!-- bilan de la visite -->
   <div class="mt-4">
     <InputLabel for="bilan" value="Bilan" />
     <textarea id="bilan" class="mt-1 block w-full" v-model="form.bilan" required autocomplete="bilan" />
     <InputError class="mt-2" :message="form.errors.bilan" />
   </div>
   <!-- drop down pour choisir médicament -->
   <div class="mt-4">
     <InputLabel for="medicament" value="Médicament" />
     <select v-model="form.medicament" id="medicament">
       <option v-for="medicament in medicaments" :value="medicament.MED_DEPOTLEGAL" :key="medicament.MED_DEPOTLEGAL">
         {{ medicament.MED_NOMCOMMERCIAL }}
       </option>
     </select>
   </div>
   <div class="mt-4">
     <PrimaryButton class="ms-4" :class="{ 'opacity-25': form.processing }" :disabled="form.processing">
       Envoyer 
     </PrimaryButton>
   </div>
 </form>


 public function search(Request $request)
 {
     $nom = $request->input('nom');
     $ville = $request->input('ville');
     $type = $request->input('type');
 
     $praticiens = Praticien::query()
         ->when($nom, function ($query, $nom) {
             return $query->where('PRA_NOM', 'LIKE', "%$nom%");
         })
         ->when($ville, function ($query, $ville) {
             return $query->where('PRA_VILLE', 'LIKE', "%$ville%");
         })
         ->when($type, function ($query, $type) {
             return $query->whereHas('typePraticien', function ($query) use ($type) {
                 $query->where('TYP_LIBELLE', 'LIKE', "%$type%");
             });
         })
         ->with('typePraticien')
         ->get();
 
     return Inertia::render('Praticien', ['praticiens' => $praticiens]);
 }

 class Medicament extends Model
{
    use HasFactory;

    protected $fillable = [
        'MED_DEPOTLEGAL',
        'MED_NOMCOMMERCIAL',
        'FAM_CODE',
        'MED_COMPOSITION',
        'MED_EFFETS',
        'MED_CONTREINDIC',
        'MED_PRIXECHANTILLON'
    ];

    protected $table = 'medicament';

}
class Praticien extends Model
{
    use HasFactory;

    protected $fillable = [
        'PRA_NUM',
        'PRA_NOM',
        'PRA_PRENOM',
        'PRA_ADRESSE',
        'PRA_CP',
        'PRA_VILLE',
        'PRA_COEFNOTORIETE',
        'TYP_CODE',
    ];

    protected $table = 'praticien';

    // Ajoutez cette méthode pour définir la relation
    public function typePraticien()
    {
        return $this->belongsTo(TypePraticien::class, 'TYP_CODE', 'TYP_CODE');
    }
}
class RapportVisite extends Model
{
    use HasFactory;

    protected $fillable = [
        'VIS_MATRICULE',
        'RAP_NUM',
        'PRA_NUM',
        'RAP_DATE',
        'RAP_BILAN',
        'RAP_MOTIF',
        'RAP_MEDICAMENT',
    ];

    protected $table = 'rapport_visite';

}
